service:
  name: serverless-shopping-app

custom:
  shoppingTopicName: shoppingTopic-${self:provider.stage}

  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-2'}

  tracing: # to enable xray
    lambda: true # for lambda functions
    apiGateway: true # for api gateway

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    SHOP_ITEMS_TABLE: ShoppingItems-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex
    STATUS_INDEX: StatusIndex
    SHOPPING_ITEM_ID_INDEX: ShoppingIdIndex
    SHOPPING_S3_BUCKET: serverless-shopping-baiu7bls-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          method: get
          path: hello

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  CreateShoppingItem:
    handler: src/lambda/http/createShoppingItem.handler
    events:
      - http:
          method: post
          path: shoppingItem
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SHOP_ITEMS_TABLE}

  GetShoppingItemsOfUser:
    handler: src/lambda/http/getShoppingItemsOfUser.handler
    events:
      - http:
          method: get
          path: shoppingItemsOfUser
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SHOP_ITEMS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}

  GetAllItems:
    handler: src/lambda/http/getAllItems.handler
    events:
      - http:
          method: get
          path: shoppingItems
          cors: true
          reqValidatorName: RequestBodyValidator
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SHOP_ITEMS_TABLE}/index/${self:provider.environment.STATUS_INDEX}

  UpdateShoppingItem:
    handler: src/lambda/http/updateShoppingItem.handler
    events:
      - http:
          method: patch
          path: shoppingItem/{shoppingId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SHOP_ITEMS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SHOP_ITEMS_TABLE}/index/${self:provider.environment.SHOPPING_ITEM_ID_INDEX}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: shoppingItem/{shoppingId}/attachment
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SHOP_ITEMS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SHOP_ITEMS_TABLE}/index/${self:provider.environment.SHOPPING_ITEM_ID_INDEX}
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: arn:aws:s3:::${self:provider.environment.SHOPPING_S3_BUCKET}/*

  DeleteShoppingItem:
    handler: src/lambda/http/deleteShoppingItem.handler
    events:
      - http:
          method: delete
          path: shoppingItem/{shoppingId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SHOP_ITEMS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SHOP_ITEMS_TABLE}/index/${self:provider.environment.SHOPPING_ITEM_ID_INDEX}
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:DeleteObject
      Resource: arn:aws:s3:::${self:provider.environment.SHOPPING_S3_BUCKET}/*

  BuyShoppingItem:
    handler: src/lambda/http/buyShoppingItem.handler
    events:
      - http:
          method: post
          path: shoppingItem/{shoppingId}/buy
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SHOP_ITEMS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SHOP_ITEMS_TABLE}/index/${self:provider.environment.SHOPPING_ITEM_ID_INDEX}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    ShoppingItemsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: shoppingId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: status
            AttributeType: N
        KeySchema:
          - AttributeName: shoppingId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SHOP_ITEMS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.SHOPPING_ITEM_ID_INDEX}
            KeySchema:
            - AttributeName: shoppingId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.STATUS_INDEX}
            KeySchema:
            - AttributeName: status
              KeyType: HASH
            Projection:
              ProjectionType: ALL

    ShoppingTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Shopping bucket topic #Human readable name
        TopicName: ${self:custom.shoppingTopicName}
        
    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref ShoppingTopic 
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.SHOPPING_S3_BUCKET}
        Topics:
          - !Ref ShoppingTopic

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.SHOPPING_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ShoppingTopic #Sending to topic not lambda
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.SHOPPING_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

              